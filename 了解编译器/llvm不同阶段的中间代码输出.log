*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'test.ll'
source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@r = dso_local global double 4.500000e+00, align 8
@.str = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"area is %lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"10 squared is %d and its square root is %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"wrong answer\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"correct answer\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}

declare i32 @__isoc99_scanf(ptr noundef, ...) #1

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'test.ll'
source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@r = dso_local global double 4.500000e+00, align 8
@.str = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"area is %lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"10 squared is %d and its square root is %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"wrong answer\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"correct answer\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}

declare i32 @__isoc99_scanf(ptr noundef, ...) #1

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @calculate_area(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, ptr %2, align 8
  %3 = load double, ptr %2, align 8
  %4 = load double, ptr %2, align 8
  %5 = fmul double %3, %4
  %6 = fmul double 0x400921FB54442D18, %5
  ret double %6
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness

# End machine code for function calculate_area.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %0:fr64 = COPY $xmm0
32B	  %1:fr64 = COPY killed %0:fr64
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
80B	  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
96B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
112B	  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
128B	  $xmm0 = COPY %5:fr64
144B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %0:fr64 = COPY $xmm0
32B	  %1:fr64 = COPY killed %0:fr64
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
80B	  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
96B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
112B	  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
128B	  $xmm0 = COPY %5:fr64
144B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr %3:fr64(tied-def 0), %8:fr64, implicit $mxcsr
  $xmm0 = COPY %5:fr64
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY killed $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm killed %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr killed %3:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
  $xmm0 = COPY killed %5:fr64
  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function calculate_area: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY killed $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm killed %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr killed %3:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
  $xmm0 = COPY killed %5:fr64
  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY killed $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm killed %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr killed %3:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
  $xmm0 = COPY killed %5:fr64
  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY killed $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = MULSDrm killed %9:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = MULSDrr killed %3:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
  $xmm0 = COPY killed %5:fr64
  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY killed $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = COPY killed %9:fr64
  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = COPY killed %3:fr64
  %5:fr64 = MULSDrr %5:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
  $xmm0 = COPY killed %5:fr64
  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

bb.0 (%ir-block.1):
  liveins: $xmm0
  %0:fr64 = COPY killed $xmm0
  %1:fr64 = COPY killed %0:fr64
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %8:fr64 = COPY killed %9:fr64
  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %5:fr64 = COPY killed %3:fr64
  %5:fr64 = MULSDrr %5:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
  $xmm0 = COPY killed %5:fr64
  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %0:fr64 = COPY killed $xmm0
32B	  %1:fr64 = COPY killed %0:fr64
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
64B	  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
80B	  %8:fr64 = COPY killed %9:fr64
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
128B	  %5:fr64 = COPY killed %3:fr64
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY killed %5:fr64
176B	  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %0:fr64 = COPY killed $xmm0
32B	  %1:fr64 = COPY killed %0:fr64
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed %1:fr64 :: (store (s64) into %ir.2)
64B	  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
80B	  %8:fr64 = COPY killed %9:fr64
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
128B	  %5:fr64 = COPY killed %3:fr64
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), killed %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY killed %5:fr64
176B	  RET64 implicit killed $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %0:fr64 = COPY $xmm0
32B	  %1:fr64 = COPY %0:fr64
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
80B	  %8:fr64 = COPY %9:fr64
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
128B	  %5:fr64 = COPY %3:fr64
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %0:fr64 = COPY $xmm0
32B	  %1:fr64 = COPY %0:fr64
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %9:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
80B	  %8:fr64 = COPY %9:fr64
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
128B	  %5:fr64 = COPY %3:fr64
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
16B	  %1:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1:fr64 :: (store (s64) into %ir.2)
64B	  %8:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  %8:fr64 = MULSDrm %8:fr64(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  %5:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  %5:fr64 = MULSDrr %5:fr64(tied-def 0), %8:fr64, implicit $mxcsr
160B	  $xmm0 = COPY %5:fr64
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
64B	  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
64B	  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
64B	  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
64B	  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
64B	  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

0B	bb.0 (%ir-block.1):
	  liveins: $xmm0
48B	  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
64B	  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
96B	  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
112B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
144B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
176B	  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  MOVSDmr %stack.0, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function calculate_area: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 0x400921FB54442D18, align=8
Function Live Ins: $xmm0

bb.0 (%ir-block.1):
  liveins: $xmm0
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.2)
  renamable $xmm1 = MULSDrm killed renamable $xmm1(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $xmm0

# End machine code for function calculate_area.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

; Loop:
12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %5 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef @r)
  %6 = load double, ptr @r, align 8
  %7 = call double @calculate_area(double noundef %6)
  store double %7, ptr %2, align 8
  %8 = load double, ptr %2, align 8
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8)
  %10 = load double, ptr @r, align 8
  %11 = fadd double %10, 1.000000e+00
  store double %11, ptr @r, align 8
  store i32 0, ptr %3, align 4
  store i32 1, ptr %4, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, ptr %4, align 4
  %14 = icmp sle i32 %13, 100
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = load i32, ptr %4, align 4
  %17 = load i32, ptr %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, ptr %3, align 4
  br label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %4, align 4
  br label %12, !llvm.loop !6

22:                                               ; preds = %12
  %23 = call double @sqrt(double noundef 1.000000e+01) #3
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef 100, double noundef %23)
  %25 = load i32, ptr %3, align 4
  switch i32 %25, label %30 [
    i32 5000, label %26
    i32 5050, label %28
  ]

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

28:                                               ; preds = %22
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  br label %30

30:                                               ; preds = %28, %26, %22
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %14:gr32 = COPY $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  %6:gr32 = COPY $eax
432B	  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
448B	  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
464B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
480B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
496B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

528B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
544B	  JCC_1 %bb.4, 15, implicit $eflags

560B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

576B	  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
592B	  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
608B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

624B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

640B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
656B	  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
672B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
688B	  JMP_1 %bb.1

704B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.5, %bb.8

720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
752B	  $xmm0 = COPY %17:fr64
768B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  %18:fr64 = COPY $xmm0
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  %19:gr64 = MOV32ri64 @.str.2
848B	  %20:gr32 = MOV32ri 100
864B	  %21:gr8 = MOV8ri 1
880B	  $rdi = COPY %19:gr64
896B	  $esi = COPY %20:gr32
912B	  $xmm0 = COPY %18:fr64
928B	  $al = COPY %21:gr8
944B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
976B	  %22:gr32 = COPY $eax
992B	  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1008B	  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
1024B	  JCC_1 %bb.5, 4, implicit $eflags
1040B	  JMP_1 %bb.8

1056B	bb.8 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.6, %bb.7

1072B	  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit $eflags
1104B	  JMP_1 %bb.7

1120B	bb.5 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.7

1136B	  %27:gr64 = MOV64ri @.str.3
1152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $rdi = COPY %27:gr64
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  %28:gr32 = COPY $eax
1248B	  JMP_1 %bb.7

1264B	bb.6 (%ir-block.28):
	; predecessors: %bb.8
	  successors: %bb.7

1280B	  %25:gr64 = MOV64ri @.str.4
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %25:gr64
1328B	  $al = MOV8ri 0
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  %26:gr32 = COPY $eax

1392B	bb.7 (%ir-block.30):
	; predecessors: %bb.8, %bb.6, %bb.5

1408B	  %29:gr32 = MOV32r0 implicit-def $eflags
1424B	  $eax = COPY %29:gr32
1440B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %14:gr32 = COPY $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  %6:gr32 = COPY $eax
432B	  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
448B	  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
464B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
480B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
496B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

512B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

528B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
544B	  JCC_1 %bb.4, 15, implicit $eflags

560B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

576B	  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
592B	  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
608B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

624B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

640B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
656B	  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
672B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
688B	  JMP_1 %bb.1

704B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.5, %bb.8

720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
752B	  $xmm0 = COPY %17:fr64
768B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  %18:fr64 = COPY $xmm0
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  %19:gr64 = MOV32ri64 @.str.2
848B	  %20:gr32 = MOV32ri 100
864B	  %21:gr8 = MOV8ri 1
880B	  $rdi = COPY %19:gr64
896B	  $esi = COPY %20:gr32
912B	  $xmm0 = COPY %18:fr64
928B	  $al = COPY %21:gr8
944B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
976B	  %22:gr32 = COPY $eax
992B	  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1008B	  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
1024B	  JCC_1 %bb.5, 4, implicit $eflags
1040B	  JMP_1 %bb.8

1056B	bb.8 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.6, %bb.7

1072B	  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit $eflags
1104B	  JMP_1 %bb.7

1120B	bb.5 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.7

1136B	  %27:gr64 = MOV64ri @.str.3
1152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $rdi = COPY %27:gr64
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  %28:gr32 = COPY $eax
1248B	  JMP_1 %bb.7

1264B	bb.6 (%ir-block.28):
	; predecessors: %bb.8
	  successors: %bb.7

1280B	  %25:gr64 = MOV64ri @.str.4
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %25:gr64
1328B	  $al = MOV8ri 0
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  %26:gr32 = COPY $eax

1392B	bb.7 (%ir-block.30):
	; predecessors: %bb.8, %bb.6, %bb.5

1408B	  %29:gr32 = MOV32r0 implicit-def $eflags
1424B	  $eax = COPY %29:gr32
1440B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.5, %bb.8

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.6, %bb.7

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.7

bb.5 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.7

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.7

bb.6 (%ir-block.28):
; predecessors: %bb.8
  successors: %bb.7

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.7 (%ir-block.30):
; predecessors: %bb.8, %bb.6, %bb.5

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $rsi = COPY %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = COPY $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $xmm0 = COPY %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 %38:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY %19:gr64
  $esi = COPY %20:gr32
  $xmm0 = COPY %18:fr64
  $al = COPY %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  %24:gr32 = SUB32ri %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %26:gr32 = COPY $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %29:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $rsi = COPY killed %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %14:gr32 = COPY killed $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY killed %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY killed $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $xmm0 = COPY killed %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm killed %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm killed %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 killed %38:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY killed %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY killed $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %20:gr32
  $xmm0 = COPY killed %18:fr64
  $al = COPY killed %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead %22:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  dead %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  dead %24:gr32 = SUB32ri killed %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %26:gr32 = COPY killed $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %29:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $rsi = COPY killed %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %14:gr32 = COPY killed $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY killed %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY killed $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $xmm0 = COPY killed %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm killed %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm killed %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 killed %38:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY killed %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY killed $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %20:gr32
  $xmm0 = COPY killed %18:fr64
  $al = COPY killed %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead %22:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  dead %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  dead %24:gr32 = SUB32ri killed %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %26:gr32 = COPY killed $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %29:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $rsi = COPY killed %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %14:gr32 = COPY killed $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY killed %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY killed $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $xmm0 = COPY killed %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm killed %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm killed %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 killed %38:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY killed %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY killed $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %20:gr32
  $xmm0 = COPY killed %18:fr64
  $al = COPY killed %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead %22:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  dead %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  dead %24:gr32 = SUB32ri killed %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %26:gr32 = COPY killed $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %29:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $rsi = COPY killed %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %14:gr32 = COPY killed $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY killed %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY killed $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $xmm0 = COPY killed %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = ADDSDrm killed %2:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = ADD32rm killed %34:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = ADD32ri8 killed %38:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY killed %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY killed $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %20:gr32
  $xmm0 = COPY killed %18:fr64
  $al = COPY killed %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead %22:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  dead %23:gr32 = SUB32ri %16:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  dead %24:gr32 = SUB32ri killed %16:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %26:gr32 = COPY killed $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %29:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $rsi = COPY killed %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %14:gr32 = COPY killed $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY killed %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY killed $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $xmm0 = COPY killed %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = COPY killed %2:fr64
  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = COPY killed %34:gr32
  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = COPY killed %38:gr32
  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY killed %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY killed $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %20:gr32
  $xmm0 = COPY killed %18:fr64
  $al = COPY killed %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead %22:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = COPY %16:gr32
  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  %24:gr32 = COPY killed %16:gr32
  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %26:gr32 = COPY killed $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %29:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %12:gr64 = MOV64ri @.str
  %13:gr64 = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $rsi = COPY killed %13:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %14:gr32 = COPY killed $eax
  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY killed %11:fr64
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = COPY killed $xmm0
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $xmm0 = COPY killed %7:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax
  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %3:fr64 = COPY killed %2:fr64
  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %33:gr32 = COPY killed %34:gr32
  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %37:gr32 = COPY killed %38:gr32
  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  $xmm0 = COPY killed %17:fr64
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:fr64 = COPY killed $xmm0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV32ri64 @.str.2
  %20:gr32 = MOV32ri 100
  %21:gr8 = MOV8ri 1
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %20:gr32
  $xmm0 = COPY killed %18:fr64
  $al = COPY killed %21:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead %22:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  %23:gr32 = COPY %16:gr32
  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  %24:gr32 = COPY killed %16:gr32
  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  %27:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %27:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  %25:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %25:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %26:gr32 = COPY killed $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  %29:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %29:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY killed %12:gr64
96B	  $rsi = COPY killed %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY killed %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY killed %4:gr64
352B	  $xmm0 = COPY killed %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
448B	  %3:fr64 = COPY killed %2:fr64
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
608B	  %33:gr32 = COPY killed %34:gr32
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
688B	  %37:gr32 = COPY killed %38:gr32
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY killed %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  %19:gr64 = MOV32ri64 @.str.2
896B	  %20:gr32 = MOV32ri 100
912B	  %21:gr8 = MOV8ri 1
928B	  $rdi = COPY killed %19:gr64
944B	  $esi = COPY killed %20:gr32
960B	  $xmm0 = COPY killed %18:fr64
976B	  $al = COPY killed %21:gr8
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %16:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1136B	  %24:gr32 = COPY killed %16:gr32
1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY killed %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY killed %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1488B	  %29:gr32 = MOV32r0 implicit-def dead $eflags
1504B	  $eax = COPY killed %29:gr32
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY killed %12:gr64
96B	  $rsi = COPY killed %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY killed %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY killed %4:gr64
352B	  $xmm0 = COPY killed %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
448B	  %3:fr64 = COPY killed %2:fr64
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
608B	  %33:gr32 = COPY killed %34:gr32
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
688B	  %37:gr32 = COPY killed %38:gr32
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY killed %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  %19:gr64 = MOV32ri64 @.str.2
896B	  %20:gr32 = MOV32ri 100
912B	  %21:gr8 = MOV8ri 1
928B	  $rdi = COPY killed %19:gr64
944B	  $esi = COPY killed %20:gr32
960B	  $xmm0 = COPY killed %18:fr64
976B	  $al = COPY killed %21:gr8
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %16:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1136B	  %24:gr32 = COPY killed %16:gr32
1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY killed %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY killed %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1488B	  %29:gr32 = MOV32r0 implicit-def dead $eflags
1504B	  $eax = COPY killed %29:gr32
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
448B	  %3:fr64 = COPY %2:fr64
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
608B	  %33:gr32 = COPY %34:gr32
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
688B	  %37:gr32 = COPY %38:gr32
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  %19:gr64 = MOV32ri64 @.str.2
896B	  %20:gr32 = MOV32ri 100
912B	  %21:gr8 = MOV8ri 1
928B	  $rdi = COPY %19:gr64
944B	  $esi = COPY %20:gr32
960B	  $xmm0 = COPY %18:fr64
976B	  $al = COPY %21:gr8
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %16:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1136B	  %24:gr32 = COPY %16:gr32
1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1488B	  %29:gr32 = MOV32r0 implicit-def dead $eflags
1504B	  $eax = COPY %29:gr32
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %2:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
448B	  %3:fr64 = COPY %2:fr64
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %34:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
608B	  %33:gr32 = COPY %34:gr32
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
688B	  %37:gr32 = COPY %38:gr32
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  %19:gr64 = MOV32ri64 @.str.2
896B	  %20:gr32 = MOV32ri 100
912B	  %21:gr8 = MOV8ri 1
928B	  $rdi = COPY %19:gr64
944B	  $esi = COPY %20:gr32
960B	  $xmm0 = COPY %18:fr64
976B	  $al = COPY %21:gr8
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %16:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1136B	  %24:gr32 = COPY %16:gr32
1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1488B	  %29:gr32 = MOV32r0 implicit-def dead $eflags
1504B	  $eax = COPY %29:gr32
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY killed $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY killed $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY killed $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY killed $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY killed $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY killed $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY killed $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %12:gr64 = MOV64ri @.str
48B	  %13:gr64 = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %12:gr64
96B	  $rsi = COPY %13:gr64
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  dead %14:gr32 = COPY $eax
176B	  %11:fr64 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $xmm0 = COPY %11:fr64
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %10:fr64 = COPY $xmm0
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %10:fr64 :: (store (s64) into %ir.2)
288B	  %7:fr64 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  %4:gr64 = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %4:gr64
352B	  $xmm0 = COPY %7:fr64
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  dead %6:gr32 = COPY $eax
432B	  %3:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  %3:fr64 = ADDSDrm %3:fr64(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, %3:fr64 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  %37:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %37:gr32 :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  %17:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
800B	  $xmm0 = COPY %17:fr64
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
848B	  %18:fr64 = COPY $xmm0
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
960B	  $xmm0 = COPY %18:fr64
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  dead %22:gr32 = COPY $eax
1040B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  %23:gr32 = COPY %24:gr32
1072B	  dead %23:gr32 = SUB32ri %23:gr32(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8

1152B	  dead %24:gr32 = SUB32ri %24:gr32(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  %27:gr64 = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = COPY %27:gr64
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  dead %28:gr32 = COPY $eax
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  %25:gr64 = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  $rdi = COPY %25:gr64
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  dead %26:gr32 = COPY $eax

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  renamable $rsi = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
288B	  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  renamable $rdi = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1040B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  renamable $ecx = COPY renamable $eax
1072B	  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8
	  liveins: $eax
1152B	  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  renamable $rdi = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  renamable $rdi = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  renamable $rsi = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
288B	  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  renamable $rdi = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1040B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  renamable $ecx = COPY renamable $eax
1072B	  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8
	  liveins: $eax
1152B	  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  renamable $rdi = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  renamable $rdi = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  renamable $rsi = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
288B	  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  renamable $rdi = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1040B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  renamable $ecx = COPY renamable $eax
1072B	  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8
	  liveins: $eax
1152B	  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  renamable $rdi = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  renamable $rdi = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  renamable $rsi = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
288B	  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  renamable $rdi = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1040B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  renamable $ecx = COPY renamable $eax
1072B	  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8
	  liveins: $eax
1152B	  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  renamable $rdi = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  renamable $rdi = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  renamable $rsi = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
288B	  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  renamable $rdi = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1040B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  renamable $ecx = COPY renamable $eax
1072B	  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8
	  liveins: $eax
1152B	  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  renamable $rdi = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  renamable $rdi = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  renamable $rsi = MOV64ri @r
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $al = MOV8ri 0
128B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
288B	  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
304B	  renamable $rdi = MOV64ri @.str.1
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $al = MOV8ri 1
384B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
464B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
480B	  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
496B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
512B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

528B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

544B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
560B	  JCC_1 %bb.4, 15, implicit killed $eflags

576B	bb.2 (%ir-block.15):
	; predecessors: %bb.1
	  successors: %bb.3

592B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
624B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
640B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

656B	bb.3 (%ir-block.19):
	; predecessors: %bb.2
	  successors: %bb.1

672B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
704B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
720B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
736B	  JMP_1 %bb.1

752B	bb.4 (%ir-block.22):
	; predecessors: %bb.1
	  successors: %bb.6, %bb.5

768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
816B	  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = MOV32ri64 @.str.2
944B	  $esi = MOV32ri 100
976B	  $al = MOV8ri 1
992B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1040B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
1056B	  renamable $ecx = COPY renamable $eax
1072B	  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
1088B	  JCC_1 %bb.6, 4, implicit killed $eflags
1104B	  JMP_1 %bb.5

1120B	bb.5 (%ir-block.22):
	; predecessors: %bb.4
	  successors: %bb.7, %bb.8
	  liveins: $eax
1152B	  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
1168B	  JCC_1 %bb.7, 4, implicit killed $eflags
1184B	  JMP_1 %bb.8

1200B	bb.6 (%ir-block.26):
	; predecessors: %bb.4
	  successors: %bb.8

1216B	  renamable $rdi = MOV64ri @.str.3
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $al = MOV8ri 0
1280B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  JMP_1 %bb.8

1344B	bb.7 (%ir-block.28):
	; predecessors: %bb.5
	  successors: %bb.8

1360B	  renamable $rdi = MOV64ri @.str.4
1376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $al = MOV8ri 0
1424B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
1440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1472B	bb.8 (%ir-block.30):
	; predecessors: %bb.5, %bb.7, %bb.6

1504B	  $eax = MOV32r0 implicit-def dead $eflags
1520B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOVSDmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $ecx = COPY renamable $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = MOV64ri @r
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, @r, $noreg :: (load (s64) from @r)
  CALL64pcrel32 @calculate_area, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $xmm0
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @r, $noreg, implicit $mxcsr :: (load (s64) from @r)
  MOVSDmr $noreg, 1, $noreg, @r, $noreg, killed renamable $xmm0 :: (store (s64) into @r)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 15, implicit killed $eflags

bb.2 (%ir-block.15):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.3)

bb.3 (%ir-block.19):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.22):
; predecessors: %bb.1
  successors: %bb.6, %bb.5

  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
  CALL64pcrel32 target-flags(x86-plt) @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 100
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load (s32) from %ir.3)
  $ecx = MOV32rr $eax
  dead renamable $ecx = SUB32ri killed renamable $ecx(tied-def 0), 5000, implicit-def $eflags
  JCC_1 %bb.6, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.22):
; predecessors: %bb.4
  successors: %bb.7, %bb.8
  liveins: $eax
  dead renamable $eax = SUB32ri killed renamable $eax(tied-def 0), 5050, implicit-def $eflags
  JCC_1 %bb.7, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.6 (%ir-block.26):
; predecessors: %bb.4
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  JMP_1 %bb.8

bb.7 (%ir-block.28):
; predecessors: %bb.5
  successors: %bb.8

  renamable $rdi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.8 (%ir-block.30):
; predecessors: %bb.5, %bb.7, %bb.6

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

