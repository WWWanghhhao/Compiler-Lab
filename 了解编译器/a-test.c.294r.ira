
;; Function calculate_area (calculate_area, funcdef_no=0, decl_uid=3399, cgraph_uid=1, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r86: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r86,l0) best SSE_REGS, allocno SSE_REGS
    r85: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a4 (r85,l0) best SSE_REGS, allocno SSE_REGS
    r84: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r84,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r83: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r83,l0) best SSE_REGS, allocno SSE_REGS
    r82: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a3 (r82,l0) best SSE_REGS, allocno SSE_REGS

  a0(r84,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r83,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a2(r86,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a3(r82,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a4(r85,l0) costs: AREG:14000 DREG:14000 CREG:14000 BREG:14000 SIREG:14000 DIREG:14000 AD_REGS:14000 CLOBBERED_REGS:14000 Q_REGS:14000 TLS_GOTBASE_REGS:14000 GENERAL_REGS:14000 FP_TOP_REG:38000 FP_SECOND_REG:38000 FLOAT_REGS:38000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:38000 FLOAT_INT_SSE_REGS:38000 MEM:16000

   Insn 17(l0): point = 0
   Insn 16(l0): point = 2
   Insn 12(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
   Insn 6(l0): point = 12
   Insn 2(l0): point = 14
 a0(r84): [3..4]
 a1(r83): [5..6]
 a2(r86): [7..8]
 a3(r82): [7..10]
 a4(r85): [11..12]
Compressing live ranges: from 17 to 8 - 47%
Ranges after the compression:
 a0(r84): [0..1]
 a1(r83): [2..3]
 a2(r86): [4..5]
 a3(r82): [4..5]
 a4(r85): [6..7]
  pref0:a0(r84)<-hr20@1538
  regions=1, blocks=3, points=8
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5
Disposition:
    3:r82  l0    21    1:r83  l0    20    0:r84  l0     0    4:r85  l0    20
    2:r86  l0    20
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


calculate_area

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 6 [bp] 20 [xmm0]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r19={1d,4u} r20={2d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,2u} r86={1d,1u} 
;;    total ref usage 43{25d,18u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 radius+0 S8 A64])
        (reg:DF 20 xmm0 [ radius ])) "test.c":12:38 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0 [ radius ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DF 85)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 radius+0 S8 A64])) "test.c":12:52 135 {*movdf_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DF 82 [ _1 ])
        (mult:DF (reg:DF 85)
            (reg:DF 85))) "test.c":12:52 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 85)
        (nil)))
(insn 8 7 9 2 (set (reg:DF 86)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "test.c":12:50 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 9 8 12 2 (set (reg:DF 83 [ _3 ])
        (mult:DF (reg:DF 82 [ _1 ])
            (reg:DF 86))) "test.c":12:50 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 86)
        (expr_list:REG_DEAD (reg:DF 82 [ _1 ])
            (nil))))
(insn 12 9 16 2 (set (reg:DF 84 [ <retval> ])
        (reg:DF 83 [ _3 ])) "test.c":12:50 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 83 [ _3 ])
        (nil)))
(insn 16 12 17 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 84 [ <retval> ])) "test.c":12:68 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 84 [ <retval> ])
        (nil)))
(insn 17 16 0 2 (use (reg/i:DF 20 xmm0)) "test.c":12:68 -1
     (nil))

;; Function main (main, funcdef_no=1, decl_uid=3401, cgraph_uid=2, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 12 n_edges 14 count 12 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 11 10
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 8 }
;; 6 succs { 7 9 }
;; 7 succs { 10 }
;; 8 succs { 10 }
;; 9 succs { 11 }
;; 11 succs { 10 }
;; 10 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 68.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a5 (r94,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a8 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a11 (r90,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r89: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a12 (r89,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a7 (r84,l0) best SSE_REGS, allocno SSE_REGS
    r83: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a9 (r83,l0) best SSE_REGS, allocno SSE_REGS
    r82: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a13 (r82,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS

  a0(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a3(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a4(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a5(r94,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a6(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:24000 INT_SSE_REGS:24000 ALL_REGS:212000 MEM:12000
  a7(r84,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a8(r92,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a9(r83,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a10(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a11(r90,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a12(r89,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a13(r82,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a14(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a15(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 79(l0): point = 0
   Insn 78(l0): point = 2
   Insn 74(l0): point = 4
   Insn 71(l0): point = 6
   Insn 89(l0): point = 9
   Insn 68(l0): point = 12
   Insn 67(l0): point = 14
   Insn 66(l0): point = 16
   Insn 86(l0): point = 19
   Insn 61(l0): point = 21
   Insn 60(l0): point = 23
   Insn 59(l0): point = 25
   Insn 84(l0): point = 28
   Insn 53(l0): point = 31
   Insn 52(l0): point = 33
   Insn 50(l0): point = 36
   Insn 49(l0): point = 38
   Insn 48(l0): point = 40
   Insn 47(l0): point = 42
   Insn 46(l0): point = 44
   Insn 45(l0): point = 46
   Insn 44(l0): point = 48
   Insn 43(l0): point = 50
   Insn 42(l0): point = 52
   Insn 33(l0): point = 55
   Insn 32(l0): point = 57
   Insn 31(l0): point = 59
   Insn 40(l0): point = 62
   Insn 39(l0): point = 64
   Insn 81(l0): point = 67
   Insn 27(l0): point = 69
   Insn 26(l0): point = 71
   Insn 25(l0): point = 73
   Insn 24(l0): point = 75
   Insn 23(l0): point = 77
   Insn 22(l0): point = 79
   Insn 21(l0): point = 81
   Insn 20(l0): point = 83
   Insn 19(l0): point = 85
   Insn 18(l0): point = 87
   Insn 17(l0): point = 89
   Insn 16(l0): point = 91
   Insn 15(l0): point = 93
   Insn 14(l0): point = 95
   Insn 13(l0): point = 97
   Insn 12(l0): point = 99
   Insn 11(l0): point = 101
   Insn 10(l0): point = 103
   Insn 9(l0): point = 105
   Insn 8(l0): point = 107
   Insn 7(l0): point = 109
   Insn 6(l0): point = 111
   Insn 5(l0): point = 113
 a0(r86): [3..4]
 a1(r85): [5..6]
 a2(r97): [15..16]
 a3(r96): [24..25]
 a4(r95): [45..46]
 a5(r94): [51..52]
 a6(r93): [58..59]
 a7(r84): [74..75]
 a8(r92): [76..77]
 a9(r83): [76..79]
 a10(r91): [86..87]
 a11(r90): [90..91]
 a12(r89): [94..95]
 a13(r82): [100..101]
 a14(r88): [108..109]
 a15(r87): [112..113]
Compressing live ranges: from 116 to 30 - 25%
Ranges after the compression:
 a0(r86): [0..1]
 a1(r85): [2..3]
 a2(r97): [4..5]
 a3(r96): [6..7]
 a4(r95): [8..9]
 a5(r94): [10..11]
 a6(r93): [12..13]
 a7(r84): [14..15]
 a8(r92): [16..17]
 a9(r83): [16..17]
 a10(r91): [18..19]
 a11(r90): [20..21]
 a12(r89): [22..23]
 a13(r82): [24..25]
 a14(r88): [26..27]
 a15(r87): [28..29]
  pref0:a2(r97)<-hr5@1500
  pref1:a3(r96)<-hr5@1500
  pref2:a4(r95)<-hr5@1500
  pref3:a5(r94)<-hr20@2000
  pref4:a10(r91)<-hr5@1500
  pref5:a11(r90)<-hr20@2000
  pref6:a12(r89)<-hr20@2000
  pref7:a14(r88)<-hr5@1500
  pref8:a15(r87)<-hr4@1500
  pref9:a0(r86)<-hr0@1500
  pref10:a13(r82)<-hr20@2000
  regions=1, blocks=12, points=30
    allocnos=16 (big 0), copies=0, conflicts=0, ranges=16
Disposition:
   13:r82  l0     0    9:r83  l0    21    7:r84  l0    20    1:r85  l0     0
    0:r86  l0     0   15:r87  l0     0   14:r88  l0     0   12:r89  l0     0
   11:r90  l0     0   10:r91  l0     0    8:r92  l0    20    6:r93  l0     0
    5:r94  l0     0    4:r95  l0     0    3:r96  l0     0    2:r97  l0     0
+++Costs: overall -11000, reg -11000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={11d,5u} r1={7d} r2={7d} r4={9d,2u} r5={12d,5u} r6={1d,11u} r7={1d,17u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,10u} r17={11d,3u} r18={6d} r19={1d,23u} r20={10d,4u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} 
;;    total ref usage 552{456d,96u,0e} in 53{47 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 87)
        (symbol_ref:DI ("r") [flags 0x2]  <var_decl 0x7cc6554641b0 r>)) "test.c":15:3 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 4 si)
        (reg:DI 87)) "test.c":15:3 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (expr_list:REG_EQUAL (symbol_ref:DI ("r") [flags 0x2]  <var_decl 0x7cc6554641b0 r>)
            (nil))))
(insn 7 6 8 2 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7cc655464d80 *.LC1>)) "test.c":15:3 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 88)) "test.c":15:3 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7cc655464d80 *.LC1>)
            (nil))))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":15:3 77 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7cc6556bed00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test.c":15:3 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 11 10 12 2 (set (reg:DF 82 [ r.0_1 ])
        (mem/c:DF (symbol_ref:DI ("r") [flags 0x2]  <var_decl 0x7cc6554641b0 r>) [1 r+0 S8 A64])) "test.c":17:17 135 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DF 20 xmm0)
        (reg:DF 82 [ r.0_1 ])) "test.c":17:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 82 [ r.0_1 ])
        (nil)))
(call_insn 13 12 14 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("calculate_area") [flags 0x3]  <function_decl 0x7cc655483200 calculate_area>) [0 calculate_area S1 A8])
            (const_int 0 [0]))) "test.c":17:17 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 14 13 15 2 (set (reg:DF 89)
        (reg:DF 20 xmm0)) "test.c":17:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 15 14 16 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 area+0 S8 A64])
        (reg:DF 89)) "test.c":17:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 89)
        (nil)))
(insn 16 15 17 2 (set (reg:DF 90)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 area+0 S8 A64])) "test.c":18:3 135 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 20 xmm0)
        (reg:DF 90)) "test.c":18:3 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 90)
        (nil)))
(insn 18 17 19 2 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7cc655464e10 *.LC2>)) "test.c":18:3 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 91)) "test.c":18:3 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7cc655464e10 *.LC2>)
            (nil))))
(insn 20 19 21 2 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "test.c":18:3 77 {*movqi_internal}
     (nil))
(call_insn 21 20 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7cc6556be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test.c":18:3 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 22 21 23 2 (set (reg:DF 83 [ r.1_2 ])
        (mem/c:DF (symbol_ref:DI ("r") [flags 0x2]  <var_decl 0x7cc6554641b0 r>) [1 r+0 S8 A64])) "test.c":21:5 135 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 92)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S8 A64])) "test.c":21:5 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 24 23 25 2 (set (reg:DF 84 [ _3 ])
        (plus:DF (reg:DF 83 [ r.1_2 ])
            (reg:DF 92))) "test.c":21:5 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 92)
        (expr_list:REG_DEAD (reg:DF 83 [ r.1_2 ])
            (nil))))
(insn 25 24 26 2 (set (mem/c:DF (symbol_ref:DI ("r") [flags 0x2]  <var_decl 0x7cc6554641b0 r>) [1 r+0 S8 A64])
        (reg:DF 84 [ _3 ])) "test.c":21:5 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 84 [ _3 ])
        (nil)))
(insn 26 25 27 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 sum+0 S4 A64])
        (const_int 0 [0])) "test.c":24:7 75 {*movsi_internal}
     (nil))
(insn 27 26 81 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "test.c":25:12 75 {*movsi_internal}
     (nil))
(jump_insn 81 27 82 2 (set (pc)
        (label_ref 34)) "test.c":25:3 807 {jump}
     (nil)
 -> 34)
(barrier 82 81 36)
(code_label 36 82 30 3 5 (nil) [1 uses])
(note 30 36 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 3 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])) "test.c":26:9 75 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -16 [0xfffffffffffffff0])) [2 sum+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [2 sum+0 S4 A64])
                    (reg:SI 93)))
            (clobber (reg:CC 17 flags))
        ]) "test.c":26:9 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 93)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 33 32 34 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":25:30 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 34 33 35 4 4 (nil) [1 uses])
(note 35 34 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 35 40 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
            (const_int 100 [0x64]))) "test.c":25:21 11 {*cmpsi_1}
     (nil))
(jump_insn 40 39 41 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "test.c":25:21 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 36)
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg:DF 94)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S8 A64])) "test.c":29:3 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.162277660168379522787063251598738133907318115234375e+0 [0x0.ca62c1d6d2da98p+2])
        (nil)))
(insn 43 42 44 5 (set (reg:DF 20 xmm0)
        (reg:DF 94)) "test.c":29:3 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 94)
        (nil)))
(insn 44 43 45 5 (set (reg:SI 4 si)
        (const_int 100 [0x64])) "test.c":29:3 75 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7cc655464ea0 *.LC5>)) "test.c":29:3 74 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 5 di)
        (reg:DI 95)) "test.c":29:3 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7cc655464ea0 *.LC5>)
            (nil))))
(insn 47 46 48 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "test.c":29:3 77 {*movqi_internal}
     (nil))
(call_insn 48 47 49 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7cc6556be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test.c":29:3 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 49 48 50 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 sum+0 S4 A64])
            (const_int 5000 [0x1388]))) "test.c":31:3 11 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "test.c":31:3 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 57)
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 sum+0 S4 A64])
            (const_int 5050 [0x13ba]))) "test.c":31:3 11 {*cmpsi_1}
     (nil))
(jump_insn 53 52 83 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) "test.c":31:3 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 64)
(note 83 53 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 84 83 85 7 (set (pc)
        (label_ref 69)) "test.c":31:3 807 {jump}
     (nil)
 -> 69)
(barrier 85 84 57)
(code_label 57 85 58 8 6 (nil) [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7cc655464f30 *.LC6>)) "test.c":33:5 74 {*movdi_internal}
     (nil))
(insn 60 59 61 8 (set (reg:DI 5 di)
        (reg:DI 96)) "test.c":33:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7cc655464f30 *.LC6>)
            (nil))))
(call_insn 61 60 86 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7cc6556be800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test.c":33:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 86 61 87 8 (set (pc)
        (label_ref 69)) "test.c":34:5 807 {jump}
     (nil)
 -> 69)
(barrier 87 86 64)
(code_label 64 87 65 9 7 (nil) [1 uses])
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 9 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7cc655495000 *.LC7>)) "test.c":36:5 74 {*movdi_internal}
     (nil))
(insn 67 66 68 9 (set (reg:DI 5 di)
        (reg:DI 97)) "test.c":36:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7cc655495000 *.LC7>)
            (nil))))
(call_insn 68 67 88 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7cc6556be800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test.c":36:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 88 68 89 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 69 11 (const_int 0 [0]) "test.c":37:5 843 {nop}
     (nil))
(code_label 69 89 70 10 8 (nil) [2 uses])
(note 70 69 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 74 10 (set (reg:SI 85 [ _18 ])
        (const_int 0 [0])) "test.c":39:10 75 {*movsi_internal}
     (nil))
(insn 74 71 78 10 (set (reg:SI 86 [ <retval> ])
        (reg:SI 85 [ _18 ])) "test.c":40:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ _18 ])
        (nil)))
(insn 78 74 79 10 (set (reg/i:SI 0 ax)
        (reg:SI 86 [ <retval> ])) "test.c":40:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ <retval> ])
        (nil)))
(insn 79 78 0 10 (use (reg/i:SI 0 ax)) "test.c":40:1 -1
     (nil))
